apply plugin: 'maven'
apply plugin: 'maven-publish'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getDestUrl() {
    if (isReleaseBuild()) {
        return "s3://android-maven/releases"
    } else {
        return "s3://android-maven/snapshots"
    }
}

/**
 * 'type: Javadoc' doesn't define a parameter but rather a type of the task
 * There are about 40 different types available in docs.
 *
 * @see {https://docs.gradle.org/3.3/dsl/org.gradle.api.Task.html}
 *
 * @note Kotlin doesn't define javadoc but dokkaJavadoc using DokkaTask. This implementation
 * will probably always return empty javadoc for kotlin files.
 */
task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}
task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}
// these definitions are equivalent to:
//artifacts.add("archives", androidSourcesJar)
//artifacts.add("archives", androidJavadocsJar)


// publishing part is defined in maven-publish and is run only during :publish
publishing {
    publications {
        // aar here is our custom publication name
        aar(MavenPublication) {
            groupId GROUP
            version = VERSION_NAME
            artifactId POM_ARTIFACT_ID

            // This file is generated by previous :assemble command
            artifact "$buildDir/outputs/aar/${project.getName()}-release.aar"
            // These files are generated by tasks defined above during :publish
            artifact androidSourcesJar
            artifact androidJavadocsJar

            // pom.withXml lets us tweak the POM file before publishing
            pom.withXml {
                // Create additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                // Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ["releaseCompile", 'compile']

                configurationNames.each { configurationName ->
                    configurations[configurationName].allDependencies.each { Dependency dependency ->

                        if (dependency.group == null ||
                            dependency.name == null ||
                            dependency.version == null ||
                            dependency.version == 'unspecified')
                            return // ignore invalid dependencies

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)

                        // If there are any exclusions in dependency
                        if (dependency.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            dependency.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        add isReleaseBuild() ? project.repositories.s3releases : project.repositories.s3snapshots
    }
}
